{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///../src/lib/directive.ts","webpack:///../src/lib/dom.ts","webpack:///../src/lib/part.ts","webpack:///../src/lib/template.ts","webpack:///../src/lib/template-instance.ts","webpack:///../src/lib/template-result.ts","webpack:///../src/lib/parts.ts","webpack:///../src/lib/default-template-processor.ts","webpack:///../src/lib/template-factory.ts","webpack:///../src/lib/render.ts","webpack:///src/lit-html.ts","webpack:///../src/lib/modify-template.ts","webpack:///../src/lib/shady-render.ts","webpack:///../src/lib/updating-element.ts","webpack:///../src/lib/css-tag.ts","webpack:///src/lit-element.ts","webpack:///./src/my-element.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","directives","WeakMap","isDirective","has","isCEPolyfill","undefined","window","customElements","polyfillWrapFlushCallback","removeNodes","container","startNode","endNode","arguments","length","node","nextSibling","removeChild","noChange","nothing","marker","concat","String","Math","random","slice","nodeMarker","markerRegex","RegExp","Template","result","element","_this","this","_classCallCheck","parts","index","partIndex","nodesToRemove","_prepareTemplate","template","content","walker","document","createTreeWalker","lastPartIndex","nextNode","currentNode","nodeType","hasAttributes","attributes","count","indexOf","stringForPart","strings","lastAttributeNameRegex","exec","attributeLookupName","toLowerCase","getAttribute","split","push","type","removeAttribute","tagName","data","parent","parentNode","_strings","lastIndex","_i","insertBefore","createMarker","createTextNode","_parent","previousSibling","_i2","_i3","_nodesToRemove","isTemplatePartActive","part","createComment","template_instance_TemplateInstance","TemplateInstance","processor","options","template_instance_classCallCheck","_parts","values","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","iterator","next","done","setValue","err","return","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","_part","commit","fragment","cloneNode","importNode","nodeIndex","_prepareInstance","_part2","handleTextExpression","insertAfterNode","_this$_parts","apply","_toConsumableArray","handleAttributeExpressions","nodeName","adoptNode","upgrade","template_result_TemplateResult","TemplateResult","template_result_classCallCheck","template_result_createClass","endIndex","html","match","substr","createElement","innerHTML","getHTML","isPrimitive","parts_typeof","AttributeCommitter","parts_classCallCheck","dirty","_createPart","parts_createClass","parts_AttributePart","text","v","Array","isArray","setAttribute","_getValue","AttributePart","comitter","committer","directive","parts_NodePart","NodePart","_pendingValue","appendChild","ref","_insert","_commitText","_commitTemplateResult","Node","_commitNode","_commitIterable","clear","templateFactory","update","instance","_clone","itemPart","itemParts","item","appendIntoPart","insertAfterPart","parts_BooleanAttributePart","BooleanAttributePart","Error","PropertyCommitter","_AttributeCommitter","parts_possibleConstructorReturn","parts_getPrototypeOf","single","parts_inherits","PropertyPart","parts_get","_AttributePart","eventOptionsSupported","parts_options","capture","addEventListener","removeEventListener","_e","parts_EventPart","EventPart","eventName","eventContext","_this2","_boundHandleEvent","e","handleEvent","newListener","oldListener","shouldRemoveListener","once","passive","shouldAddListener","_options","getOptions","event","defaultTemplateProcessor","DefaultTemplateProcessor","default_template_processor_classCallCheck","prefix","templateCache","templateCaches","stringsArray","keyString","Map","set","join","getTemplateElement","render_parts","lit_html_html","_len","_key","walkerNodeFilter","removeNodesFromTemplate","modify_template_nextActiveIndexInTemplateParts","removeCount","nodesToRemoveInTemplate","currentRemovingNode","forEach","countNodes","getTemplateCacheKey","scopeName","compatibleShadyCSSVersion","ShadyCSS","prepareTemplateDom","console","warn","shady_render_shadyTemplateFactory","cacheKey","TEMPLATE_TYPES","shadyRenderSet","Set","shady_render_prepareTemplateStyles","renderedDOM","add","styles","querySelectorAll","condensedStyle","style","textContent","templates","from","shady_render_removeStylesFromLitTemplates","refNode","insertCount","walkerIndex","insertNodeIntoTemplate","firstChild","prepareTemplateStyles","nativeShadow","_style","querySelector","removes","JSCompiler_renameProperty","prop","_obj","defaultConverter","toAttribute","Boolean","JSON","stringify","fromAttribute","Number","parse","notEqual","old","defaultPropertyDeclaration","attribute","converter","reflect","hasChanged","microtaskPromise","Promise","resolve","UpdatingElement","_HTMLElement","updating_element_classCallCheck","updating_element_possibleConstructorReturn","updating_element_getPrototypeOf","_updateState","_instanceProperties","_updatePromise","_hasConnectedResolver","_changedProperties","_reflectingProperties","initialize","updating_element_inherits","_wrapNativeSuper","HTMLElement","_saveInstanceProperties","_requestUpdate","constructor","_classProperties","_v","_this3","_attributeToProperty","ctor","attr","_attributeNameForProperty","attrValue","_propertyValueToAttribute","propName","_attributeToPropertyMap","_propertyValueFromAttribute","oldValue","shouldRequestUpdate","_valueHasChanged","_hasRequestedUpdate","_enqueueUpdate","updateComplete","_enqueueUpdate2","regeneratorRuntime","mark","_callee","reject","previousUpdatePromise","_this4","wrap","_context","prev","res","rej","t0","_hasConnected","performUpdate","t1","stop","_applyInstanceProperties","shouldUpdate","changedProperties","_markUpdated","firstUpdated","updated","_this5","size","k","_propertyToAttribute","_this6","superProperties","getPrototypeOf","_ensureClassProperties","noAccessor","updating_element_typeof","configurable","finalized","superCtor","finalize","props","properties","propKeys","updating_element_toConsumableArray","getOwnPropertyNames","getOwnPropertySymbols","createProperty","_this7","supportsAdoptingStyleSheets","Document","CSSStyleSheet","flattenStyles","flat","Infinity","arrayFlat","lit_element_LitElement","_UpdatingElement","LitElement","lit_element_classCallCheck","lit_element_possibleConstructorReturn","lit_element_getPrototypeOf","lit_element_inherits","lit_element_get","_styles","_getUniqueStyles","userStyles","reduceRight","unshift","renderRoot","createRenderRoot","ShadowRoot","adoptStyles","attachShadow","adoptedStyleSheets","map","styleSheet","_needsShimAdoptedStyleSheets","ScopingShim","prepareAdoptedCssText","cssText","localName","hasUpdated","styleElement","templateResult","render","hasRendered","needsScoping","firstScopeRender","renderContainer","createDocumentFragment","assign","appendInto","render_render","delete","host","MyElement","_templateObject","define"],"mappings":"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","file":"legacy/main.57a2bc85b1fb2385664e.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {Part} from './part.js';\n\nconst directives = new WeakMap<object, true>();\n\n// tslint:disable-next-line:no-any\nexport type DirectiveFactory = (...args: any[]) => object;\n\nexport type DirectiveFn = (part: Part) => void;\n\n/**\n * Brands a function as a directive so that lit-html will call the function\n * during template rendering, rather than passing as a value.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object\n *\n * @example\n *\n * ```\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n * ```\n */\n// tslint:disable-next-line:no-any\nexport const directive = <F extends DirectiveFactory>(f: F): F =>\n    ((...args: unknown[]) => {\n      const d = f(...args);\n      directives.set(d, true);\n      return d;\n    }) as F;\n\nexport const isDirective = (o: unknown): o is DirectiveFn => {\n  return typeof o === 'function' && directives.has(o);\n};\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\ninterface MaybePolyfilledCe extends CustomElementRegistry {\n  polyfillWrapFlushCallback?: object;\n}\n\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    (window.customElements as MaybePolyfilledCe).polyfillWrapFlushCallback !==\n        undefined;\n\n/**\n * Reparents nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), into another container (could be the same container), before\n * `beforeNode`. If `beforeNode` is null, it appends the nodes to the\n * container.\n */\nexport const reparentNodes =\n    (container: Node,\n     start: Node|null,\n     end: Node|null = null,\n     before: Node|null = null): void => {\n      let node = start;\n      while (node !== end) {\n        const n = node!.nextSibling;\n        container.insertBefore(node!, before as Node);\n        node = n;\n      }\n    };\n\n/**\n * Removes nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), from `container`.\n */\nexport const removeNodes =\n    (container: Node, startNode: Node|null, endNode: Node|null = null):\n        void => {\n          let node = startNode;\n          while (node !== endNode) {\n            const n = node!.nextSibling;\n            container.removeChild(node!);\n            node = n;\n          }\n        };\n","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\n/**\n * The Part interface represents a dynamic part of a template instance rendered\n * by lit-html.\n */\nexport interface Part {\n  value: unknown;\n\n  /**\n   * Sets the current part value, but does not write it to the DOM.\n   * @param value The value that will be committed.\n   */\n  setValue(value: unknown): void;\n\n  /**\n   * Commits the current part value, cause it to actually be written to the DOM.\n   */\n  commit(): void;\n}\n\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange: object = {};\n\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {TemplateResult} from './template-result.js';\n\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\n\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n  parts: TemplatePart[] = [];\n  element: HTMLTemplateElement;\n\n  constructor(result: TemplateResult, element: HTMLTemplateElement) {\n    this.element = element;\n    let index = -1;\n    let partIndex = 0;\n    const nodesToRemove: Node[] = [];\n    const _prepareTemplate = (template: HTMLTemplateElement) => {\n      const content = template.content;\n      // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n      // null\n      const walker = document.createTreeWalker(\n          content,\n          133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */,\n          null,\n          false);\n      // Keeps track of the last index associated with a part. We try to delete\n      // unnecessary nodes, but we never want to associate two different parts\n      // to the same index. They must have a constant node between.\n      let lastPartIndex = 0;\n      while (walker.nextNode()) {\n        index++;\n        const node = walker.currentNode as Element | Comment | Text;\n        if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n          if ((node as Element).hasAttributes()) {\n            const attributes = (node as Element).attributes;\n            // Per\n            // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n            // attributes are not guaranteed to be returned in document order.\n            // In particular, Edge/IE can return them out of order, so we cannot\n            // assume a correspondance between part index and attribute index.\n            let count = 0;\n            for (let i = 0; i < attributes.length; i++) {\n              if (attributes[i].value.indexOf(marker) >= 0) {\n                count++;\n              }\n            }\n            while (count-- > 0) {\n              // Get the template literal section leading up to the first\n              // expression in this attribute\n              const stringForPart = result.strings[partIndex];\n              // Find the attribute name\n              const name = lastAttributeNameRegex.exec(stringForPart)![2];\n              // Find the corresponding attribute\n              // All bound attributes have had a suffix added in\n              // TemplateResult#getHTML to opt out of special attribute\n              // handling. To look up the attribute value we also need to add\n              // the suffix.\n              const attributeLookupName =\n                  name.toLowerCase() + boundAttributeSuffix;\n              const attributeValue =\n                  (node as Element).getAttribute(attributeLookupName)!;\n              const strings = attributeValue.split(markerRegex);\n              this.parts.push({type: 'attribute', index, name, strings});\n              (node as Element).removeAttribute(attributeLookupName);\n              partIndex += strings.length - 1;\n            }\n          }\n          if ((node as Element).tagName === 'TEMPLATE') {\n            _prepareTemplate(node as HTMLTemplateElement);\n          }\n        } else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n          const data = (node as Text).data!;\n          if (data.indexOf(marker) >= 0) {\n            const parent = node.parentNode!;\n            const strings = data.split(markerRegex);\n            const lastIndex = strings.length - 1;\n            // Generate a new text node for each literal section\n            // These nodes are also used as the markers for node parts\n            for (let i = 0; i < lastIndex; i++) {\n              parent.insertBefore(\n                  (strings[i] === '') ? createMarker() :\n                                        document.createTextNode(strings[i]),\n                  node);\n              this.parts.push({type: 'node', index: ++index});\n            }\n            // If there's no text, we must insert a comment to mark our place.\n            // Else, we can trust it will stick around after cloning.\n            if (strings[lastIndex] === '') {\n              parent.insertBefore(createMarker(), node);\n              nodesToRemove.push(node);\n            } else {\n              (node as Text).data = strings[lastIndex];\n            }\n            // We have a part for each match found\n            partIndex += lastIndex;\n          }\n        } else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n          if ((node as Comment).data === marker) {\n            const parent = node.parentNode!;\n            // Add a new marker node to be the startNode of the Part if any of\n            // the following are true:\n            //  * We don't have a previousSibling\n            //  * The previousSibling is already the start of a previous part\n            if (node.previousSibling === null || index === lastPartIndex) {\n              index++;\n              parent.insertBefore(createMarker(), node);\n            }\n            lastPartIndex = index;\n            this.parts.push({type: 'node', index});\n            // If we don't have a nextSibling, keep this node so we have an end.\n            // Else, we can remove it to save future costs.\n            if (node.nextSibling === null) {\n              (node as Comment).data = '';\n            } else {\n              nodesToRemove.push(node);\n              index--;\n            }\n            partIndex++;\n          } else {\n            let i = -1;\n            while ((i = (node as Comment).data!.indexOf(marker, i + 1)) !==\n                   -1) {\n              // Comment node has a binding marker inside, make an inactive part\n              // The binding won't work, but subsequent bindings will\n              // TODO (justinfagnani): consider whether it's even worth it to\n              // make bindings in comments work\n              this.parts.push({type: 'node', index: -1});\n            }\n          }\n        }\n      }\n    };\n    _prepareTemplate(element);\n    // Remove text binding nodes after the walk to not disturb the TreeWalker\n    for (const n of nodesToRemove) {\n      n.parentNode!.removeChild(n);\n    }\n  }\n}\n\n/**\n * A placeholder for a dynamic expression in an HTML template.\n *\n * There are two built-in part types: AttributePart and NodePart. NodeParts\n * always represent a single dynamic expression, while AttributeParts may\n * represent as many expressions are contained in the attribute.\n *\n * A Template's parts are mutable, so parts can be replaced or modified\n * (possibly to implement different template semantics). The contract is that\n * parts can only be replaced, not removed, added or reordered, and parts must\n * always consume the correct number of values in their `update()` method.\n *\n * TODO(justinfagnani): That requirement is a little fragile. A\n * TemplateInstance could instead be more careful about which values it gives\n * to Part.update().\n */\nexport type TemplatePart = {\n  type: 'node',\n  index: number\n}|{type: 'attribute', index: number, name: string, strings: string[]};\n\nexport const isTemplatePartActive = (part: TemplatePart) => part.index !== -1;\n\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#attributes-0\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-character\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex =\n    /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \\x09\\x0a\\x0c\\x0d\"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {isCEPolyfill} from './dom.js';\nimport {Part} from './part.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateProcessor} from './template-processor.js';\nimport {isTemplatePartActive, Template} from './template.js';\n\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n  _parts: Array<Part|undefined> = [];\n  processor: TemplateProcessor;\n  options: RenderOptions;\n  template: Template;\n\n  constructor(\n      template: Template, processor: TemplateProcessor,\n      options: RenderOptions) {\n    this.template = template;\n    this.processor = processor;\n    this.options = options;\n  }\n\n  update(values: unknown[]) {\n    let i = 0;\n    for (const part of this._parts) {\n      if (part !== undefined) {\n        part.setValue(values[i]);\n      }\n      i++;\n    }\n    for (const part of this._parts) {\n      if (part !== undefined) {\n        part.commit();\n      }\n    }\n  }\n\n  _clone(): DocumentFragment {\n    // When using the Custom Elements polyfill, clone the node, rather than\n    // importing it, to keep the fragment in the template's document. This\n    // leaves the fragment inert so custom elements won't upgrade and\n    // potentially modify their contents by creating a polyfilled ShadowRoot\n    // while we traverse the tree.\n    const fragment = isCEPolyfill ?\n        this.template.element.content.cloneNode(true) as DocumentFragment :\n        document.importNode(this.template.element.content, true);\n\n    const parts = this.template.parts;\n    let partIndex = 0;\n    let nodeIndex = 0;\n    const _prepareInstance = (fragment: DocumentFragment) => {\n      // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n      // null\n      const walker = document.createTreeWalker(\n          fragment,\n          133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */,\n          null,\n          false);\n      let node = walker.nextNode();\n      // Loop through all the nodes and parts of a template\n      while (partIndex < parts.length && node !== null) {\n        const part = parts[partIndex];\n        // Consecutive Parts may have the same node index, in the case of\n        // multiple bound attributes on an element. So each iteration we either\n        // increment the nodeIndex, if we aren't on a node with a part, or the\n        // partIndex if we are. By not incrementing the nodeIndex when we find a\n        // part, we allow for the next part to be associated with the current\n        // node if neccessasry.\n        if (!isTemplatePartActive(part)) {\n          this._parts.push(undefined);\n          partIndex++;\n        } else if (nodeIndex === part.index) {\n          if (part.type === 'node') {\n            const part = this.processor.handleTextExpression(this.options);\n            part.insertAfterNode(node.previousSibling!);\n            this._parts.push(part);\n          } else {\n            this._parts.push(...this.processor.handleAttributeExpressions(\n                node as Element, part.name, part.strings, this.options));\n          }\n          partIndex++;\n        } else {\n          nodeIndex++;\n          if (node.nodeName === 'TEMPLATE') {\n            _prepareInstance((node as HTMLTemplateElement).content);\n          }\n          node = walker.nextNode();\n        }\n      }\n    };\n    _prepareInstance(fragment);\n    if (isCEPolyfill) {\n      document.adoptNode(fragment);\n      customElements.upgrade(fragment);\n    }\n    return fragment;\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {reparentNodes} from './dom.js';\nimport {TemplateProcessor} from './template-processor.js';\nimport {boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker} from './template.js';\n\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n  strings: TemplateStringsArray;\n  values: unknown[];\n  type: string;\n  processor: TemplateProcessor;\n\n  constructor(\n      strings: TemplateStringsArray, values: unknown[], type: string,\n      processor: TemplateProcessor) {\n    this.strings = strings;\n    this.values = values;\n    this.type = type;\n    this.processor = processor;\n  }\n\n  /**\n   * Returns a string of HTML used to create a `<template>` element.\n   */\n  getHTML(): string {\n    const endIndex = this.strings.length - 1;\n    let html = '';\n    for (let i = 0; i < endIndex; i++) {\n      const s = this.strings[i];\n      // This exec() call does two things:\n      // 1) Appends a suffix to the bound attribute name to opt out of special\n      // attribute value parsing that IE11 and Edge do, like for style and\n      // many SVG attributes. The Template class also appends the same suffix\n      // when looking up attributes to create Parts.\n      // 2) Adds an unquoted-attribute-safe marker for the first expression in\n      // an attribute. Subsequent attribute expressions will use node markers,\n      // and this is safe since attributes with multiple expressions are\n      // guaranteed to be quoted.\n      const match = lastAttributeNameRegex.exec(s);\n      if (match) {\n        // We're starting a new bound attribute.\n        // Add the safe attribute suffix, and use unquoted-attribute-safe\n        // marker.\n        html += s.substr(0, match.index) + match[1] + match[2] +\n            boundAttributeSuffix + match[3] + marker;\n      } else {\n        // We're either in a bound node, or trailing bound attribute.\n        // Either way, nodeMarker is safe to use.\n        html += s + nodeMarker;\n      }\n    }\n    return html + this.strings[endIndex];\n  }\n\n  getTemplateElement(): HTMLTemplateElement {\n    const template = document.createElement('template');\n    template.innerHTML = this.getHTML();\n    return template;\n  }\n}\n\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTMl in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n  getHTML(): string {\n    return `<svg>${super.getHTML()}</svg>`;\n  }\n\n  getTemplateElement(): HTMLTemplateElement {\n    const template = super.getTemplateElement();\n    const content = template.content;\n    const svgElement = content.firstChild!;\n    content.removeChild(svgElement);\n    reparentNodes(content, svgElement.firstChild);\n    return template;\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {isDirective} from './directive.js';\nimport {removeNodes} from './dom.js';\nimport {noChange, nothing, Part} from './part.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateInstance} from './template-instance.js';\nimport {TemplateResult} from './template-result.js';\nimport {createMarker} from './template.js';\n\n// https://tc39.github.io/ecma262/#sec-typeof-operator\nexport type Primitive = null|undefined|boolean|number|string|Symbol|bigint;\nexport const isPrimitive = (value: unknown): value is Primitive => {\n  return (\n      value === null ||\n      !(typeof value === 'object' || typeof value === 'function'));\n};\n\n/**\n * Sets attribute values for AttributeParts, so that the value is only set once\n * even if there are multiple parts for an attribute.\n */\nexport class AttributeCommitter {\n  element: Element;\n  name: string;\n  strings: string[];\n  parts: AttributePart[];\n  dirty = true;\n\n  constructor(element: Element, name: string, strings: string[]) {\n    this.element = element;\n    this.name = name;\n    this.strings = strings;\n    this.parts = [];\n    for (let i = 0; i < strings.length - 1; i++) {\n      this.parts[i] = this._createPart();\n    }\n  }\n\n  /**\n   * Creates a single part. Override this to create a differnt type of part.\n   */\n  protected _createPart(): AttributePart {\n    return new AttributePart(this);\n  }\n\n  protected _getValue(): unknown {\n    const strings = this.strings;\n    const l = strings.length - 1;\n    let text = '';\n\n    for (let i = 0; i < l; i++) {\n      text += strings[i];\n      const part = this.parts[i];\n      if (part !== undefined) {\n        const v = part.value;\n        if (v != null &&\n            (Array.isArray(v) ||\n             // tslint:disable-next-line:no-any\n             typeof v !== 'string' && (v as any)[Symbol.iterator])) {\n          for (const t of v as Iterable<unknown>) {\n            text += typeof t === 'string' ? t : String(t);\n          }\n        } else {\n          text += typeof v === 'string' ? v : String(v);\n        }\n      }\n    }\n\n    text += strings[l];\n    return text;\n  }\n\n  commit(): void {\n    if (this.dirty) {\n      this.dirty = false;\n      this.element.setAttribute(this.name, this._getValue() as string);\n    }\n  }\n}\n\nexport class AttributePart implements Part {\n  committer: AttributeCommitter;\n  value: unknown = undefined;\n\n  constructor(comitter: AttributeCommitter) {\n    this.committer = comitter;\n  }\n\n  setValue(value: unknown): void {\n    if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n      this.value = value;\n      // If the value is a not a directive, dirty the committer so that it'll\n      // call setAttribute. If the value is a directive, it'll dirty the\n      // committer if it calls setValue().\n      if (!isDirective(value)) {\n        this.committer.dirty = true;\n      }\n    }\n  }\n\n  commit() {\n    while (isDirective(this.value)) {\n      const directive = this.value;\n      this.value = noChange;\n      directive(this);\n    }\n    if (this.value === noChange) {\n      return;\n    }\n    this.committer.commit();\n  }\n}\n\nexport class NodePart implements Part {\n  options: RenderOptions;\n  startNode!: Node;\n  endNode!: Node;\n  value: unknown = undefined;\n  _pendingValue: unknown = undefined;\n\n  constructor(options: RenderOptions) {\n    this.options = options;\n  }\n\n  /**\n   * Inserts this part into a container.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  appendInto(container: Node) {\n    this.startNode = container.appendChild(createMarker());\n    this.endNode = container.appendChild(createMarker());\n  }\n\n  /**\n   * Inserts this part between `ref` and `ref`'s next sibling. Both `ref` and\n   * its next sibling must be static, unchanging nodes such as those that appear\n   * in a literal section of a template.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  insertAfterNode(ref: Node) {\n    this.startNode = ref;\n    this.endNode = ref.nextSibling!;\n  }\n\n  /**\n   * Appends this part into a parent part.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  appendIntoPart(part: NodePart) {\n    part._insert(this.startNode = createMarker());\n    part._insert(this.endNode = createMarker());\n  }\n\n  /**\n   * Appends this part after `ref`\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  insertAfterPart(ref: NodePart) {\n    ref._insert(this.startNode = createMarker());\n    this.endNode = ref.endNode;\n    ref.endNode = this.startNode;\n  }\n\n  setValue(value: unknown): void {\n    this._pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this._pendingValue)) {\n      const directive = this._pendingValue;\n      this._pendingValue = noChange;\n      directive(this);\n    }\n    const value = this._pendingValue;\n    if (value === noChange) {\n      return;\n    }\n    if (isPrimitive(value)) {\n      if (value !== this.value) {\n        this._commitText(value);\n      }\n    } else if (value instanceof TemplateResult) {\n      this._commitTemplateResult(value);\n    } else if (value instanceof Node) {\n      this._commitNode(value);\n    } else if (\n        Array.isArray(value) ||\n        // tslint:disable-next-line:no-any\n        (value as any)[Symbol.iterator]) {\n      this._commitIterable(value as Iterable<unknown>);\n    } else if (value === nothing) {\n      this.value = nothing;\n      this.clear();\n    } else {\n      // Fallback, will render the string representation\n      this._commitText(value);\n    }\n  }\n\n  private _insert(node: Node) {\n    this.endNode.parentNode!.insertBefore(node, this.endNode);\n  }\n\n  private _commitNode(value: Node): void {\n    if (this.value === value) {\n      return;\n    }\n    this.clear();\n    this._insert(value);\n    this.value = value;\n  }\n\n  private _commitText(value: unknown): void {\n    const node = this.startNode.nextSibling!;\n    value = value == null ? '' : value;\n    if (node === this.endNode.previousSibling &&\n        node.nodeType === 3 /* Node.TEXT_NODE */) {\n      // If we only have a single text node between the markers, we can just\n      // set its value, rather than replacing it.\n      // TODO(justinfagnani): Can we just check if this.value is primitive?\n      (node as Text).data = value as string;\n    } else {\n      this._commitNode(document.createTextNode(\n          typeof value === 'string' ? value : String(value)));\n    }\n    this.value = value;\n  }\n\n  private _commitTemplateResult(value: TemplateResult): void {\n    const template = this.options.templateFactory(value);\n    if (this.value instanceof TemplateInstance &&\n        this.value.template === template) {\n      this.value.update(value.values);\n    } else {\n      // Make sure we propagate the template processor from the TemplateResult\n      // so that we use its syntax extension, etc. The template factory comes\n      // from the render function options so that it can control template\n      // caching and preprocessing.\n      const instance =\n          new TemplateInstance(template, value.processor, this.options);\n      const fragment = instance._clone();\n      instance.update(value.values);\n      this._commitNode(fragment);\n      this.value = instance;\n    }\n  }\n\n  private _commitIterable(value: Iterable<unknown>): void {\n    // For an Iterable, we create a new InstancePart per item, then set its\n    // value to the item. This is a little bit of overhead for every item in\n    // an Iterable, but it lets us recurse easily and efficiently update Arrays\n    // of TemplateResults that will be commonly returned from expressions like:\n    // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n\n    // If _value is an array, then the previous render was of an\n    // iterable and _value will contain the NodeParts from the previous\n    // render. If _value is not an array, clear this part and make a new\n    // array for NodeParts.\n    if (!Array.isArray(this.value)) {\n      this.value = [];\n      this.clear();\n    }\n\n    // Lets us keep track of how many items we stamped so we can clear leftover\n    // items from a previous render\n    const itemParts = this.value as NodePart[];\n    let partIndex = 0;\n    let itemPart: NodePart|undefined;\n\n    for (const item of value) {\n      // Try to reuse an existing part\n      itemPart = itemParts[partIndex];\n\n      // If no existing part, create a new one\n      if (itemPart === undefined) {\n        itemPart = new NodePart(this.options);\n        itemParts.push(itemPart);\n        if (partIndex === 0) {\n          itemPart.appendIntoPart(this);\n        } else {\n          itemPart.insertAfterPart(itemParts[partIndex - 1]);\n        }\n      }\n      itemPart.setValue(item);\n      itemPart.commit();\n      partIndex++;\n    }\n\n    if (partIndex < itemParts.length) {\n      // Truncate the parts array so _value reflects the current state\n      itemParts.length = partIndex;\n      this.clear(itemPart && itemPart!.endNode);\n    }\n  }\n\n  clear(startNode: Node = this.startNode) {\n    removeNodes(\n        this.startNode.parentNode!, startNode.nextSibling!, this.endNode);\n  }\n}\n\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart implements Part {\n  element: Element;\n  name: string;\n  strings: string[];\n  value: unknown = undefined;\n  _pendingValue: unknown = undefined;\n\n  constructor(element: Element, name: string, strings: string[]) {\n    if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n      throw new Error(\n          'Boolean attributes can only contain a single expression');\n    }\n    this.element = element;\n    this.name = name;\n    this.strings = strings;\n  }\n\n  setValue(value: unknown): void {\n    this._pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this._pendingValue)) {\n      const directive = this._pendingValue;\n      this._pendingValue = noChange;\n      directive(this);\n    }\n    if (this._pendingValue === noChange) {\n      return;\n    }\n    const value = !!this._pendingValue;\n    if (this.value !== value) {\n      if (value) {\n        this.element.setAttribute(this.name, '');\n      } else {\n        this.element.removeAttribute(this.name);\n      }\n    }\n    this.value = value;\n    this._pendingValue = noChange;\n  }\n}\n\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n  single: boolean;\n\n  constructor(element: Element, name: string, strings: string[]) {\n    super(element, name, strings);\n    this.single =\n        (strings.length === 2 && strings[0] === '' && strings[1] === '');\n  }\n\n  protected _createPart(): PropertyPart {\n    return new PropertyPart(this);\n  }\n\n  _getValue() {\n    if (this.single) {\n      return this.parts[0].value;\n    }\n    return super._getValue();\n  }\n\n  commit(): void {\n    if (this.dirty) {\n      this.dirty = false;\n      // tslint:disable-next-line:no-any\n      (this.element as any)[this.name] = this._getValue();\n    }\n  }\n}\n\nexport class PropertyPart extends AttributePart {}\n\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the thrid\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\n\ntry {\n  const options = {\n    get capture() {\n      eventOptionsSupported = true;\n      return false;\n    }\n  };\n  // tslint:disable-next-line:no-any\n  window.addEventListener('test', options as any, options);\n  // tslint:disable-next-line:no-any\n  window.removeEventListener('test', options as any, options);\n} catch (_e) {\n}\n\n\ntype EventHandlerWithOptions =\n    EventListenerOrEventListenerObject&Partial<AddEventListenerOptions>;\nexport class EventPart implements Part {\n  element: Element;\n  eventName: string;\n  eventContext?: EventTarget;\n  value: undefined|EventHandlerWithOptions = undefined;\n  _options?: AddEventListenerOptions;\n  _pendingValue: undefined|EventHandlerWithOptions = undefined;\n  _boundHandleEvent: (event: Event) => void;\n\n  constructor(element: Element, eventName: string, eventContext?: EventTarget) {\n    this.element = element;\n    this.eventName = eventName;\n    this.eventContext = eventContext;\n    this._boundHandleEvent = (e) => this.handleEvent(e);\n  }\n\n  setValue(value: undefined|EventHandlerWithOptions): void {\n    this._pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this._pendingValue)) {\n      const directive = this._pendingValue;\n      this._pendingValue = noChange as EventHandlerWithOptions;\n      directive(this);\n    }\n    if (this._pendingValue === noChange) {\n      return;\n    }\n\n    const newListener = this._pendingValue;\n    const oldListener = this.value;\n    const shouldRemoveListener = newListener == null ||\n        oldListener != null &&\n            (newListener.capture !== oldListener.capture ||\n             newListener.once !== oldListener.once ||\n             newListener.passive !== oldListener.passive);\n    const shouldAddListener =\n        newListener != null && (oldListener == null || shouldRemoveListener);\n\n    if (shouldRemoveListener) {\n      this.element.removeEventListener(\n          this.eventName, this._boundHandleEvent, this._options);\n    }\n    if (shouldAddListener) {\n      this._options = getOptions(newListener);\n      this.element.addEventListener(\n          this.eventName, this._boundHandleEvent, this._options);\n    }\n    this.value = newListener;\n    this._pendingValue = noChange as EventHandlerWithOptions;\n  }\n\n  handleEvent(event: Event) {\n    if (typeof this.value === 'function') {\n      this.value.call(this.eventContext || this.element, event);\n    } else {\n      (this.value as EventListenerObject).handleEvent(event);\n    }\n  }\n}\n\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o: AddEventListenerOptions|undefined) => o &&\n    (eventOptionsSupported ?\n         {capture: o.capture, passive: o.passive, once: o.once} :\n         o.capture as AddEventListenerOptions);\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {Part} from './part.js';\nimport {AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter} from './parts.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateProcessor} from './template-processor.js';\n\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor implements TemplateProcessor {\n  /**\n   * Create parts for an attribute-position binding, given the event, attribute\n   * name, and string literals.\n   *\n   * @param element The element containing the binding\n   * @param name  The attribute name\n   * @param strings The string literals. There are always at least two strings,\n   *   event for fully-controlled bindings with a single expression.\n   */\n  handleAttributeExpressions(\n      element: Element, name: string, strings: string[],\n      options: RenderOptions): Part[] {\n    const prefix = name[0];\n    if (prefix === '.') {\n      const comitter = new PropertyCommitter(element, name.slice(1), strings);\n      return comitter.parts;\n    }\n    if (prefix === '@') {\n      return [new EventPart(element, name.slice(1), options.eventContext)];\n    }\n    if (prefix === '?') {\n      return [new BooleanAttributePart(element, name.slice(1), strings)];\n    }\n    const comitter = new AttributeCommitter(element, name, strings);\n    return comitter.parts;\n  }\n  /**\n   * Create parts for a text-position binding.\n   * @param templateFactory\n   */\n  handleTextExpression(options: RenderOptions) {\n    return new NodePart(options);\n  }\n}\n\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {TemplateResult} from './template-result.js';\nimport {marker, Template} from './template.js';\n\n/**\n * A function type that creates a Template from a TemplateResult.\n *\n * This is a hook into the template-creation process for rendering that\n * requires some modification of templates before they're used, like ShadyCSS,\n * which must add classes to elements and remove styles.\n *\n * Templates should be cached as aggressively as possible, so that many\n * TemplateResults produced from the same expression only do the work of\n * creating the Template the first time.\n *\n * Templates are usually cached by TemplateResult.strings and\n * TemplateResult.type, but may be cached by other keys if this function\n * modifies the template.\n *\n * Note that currently TemplateFactories must not add, remove, or reorder\n * expressions, because there is no way to describe such a modification\n * to render() so that values are interpolated to the correct place in the\n * template instances.\n */\nexport type TemplateFactory = (result: TemplateResult) => Template;\n\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result: TemplateResult) {\n  let templateCache = templateCaches.get(result.type);\n  if (templateCache === undefined) {\n    templateCache = {\n      stringsArray: new WeakMap<TemplateStringsArray, Template>(),\n      keyString: new Map<string, Template>()\n    };\n    templateCaches.set(result.type, templateCache);\n  }\n\n  let template = templateCache.stringsArray.get(result.strings);\n  if (template !== undefined) {\n    return template;\n  }\n\n  // If the TemplateStringsArray is new, generate a key from the strings\n  // This key is shared between all templates with identical content\n  const key = result.strings.join(marker);\n\n  // Check if we already have a Template for this key\n  template = templateCache.keyString.get(key);\n  if (template === undefined) {\n    // If we have not seen this key before, create a new Template\n    template = new Template(result, result.getTemplateElement());\n    // Cache the Template for this key\n    templateCache.keyString.set(key, template);\n  }\n\n  // Cache all future queries for this TemplateStringsArray\n  templateCache.stringsArray.set(result.strings, template);\n  return template;\n}\n\n/**\n * The first argument to JS template tags retain identity across multiple\n * calls to a tag for the same literal, so we can cache work done per literal\n * in a Map.\n *\n * Safari currently has a bug which occasionally breaks this behaviour, so we\n * need to cache the Template at two levels. We first cache the\n * TemplateStringsArray, and if that fails, we cache a key constructed by\n * joining the strings array.\n */\nexport type templateCache = {\n  stringsArray: WeakMap<TemplateStringsArray, Template>;\n  keyString: Map<string, Template>;\n};\n\nexport const templateCaches = new Map<string, templateCache>();\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {removeNodes} from './dom.js';\nimport {NodePart} from './parts.js';\nimport {RenderOptions} from './render-options.js';\nimport {templateFactory} from './template-factory.js';\nimport {TemplateResult} from './template-result.js';\n\nexport const parts = new WeakMap<Node, NodePart>();\n\n/**\n * Renders a template to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result a TemplateResult created by evaluating a template tag like\n *     `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render =\n    (result: TemplateResult,\n     container: Element|DocumentFragment,\n     options?: Partial<RenderOptions>) => {\n      let part = parts.get(container);\n      if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart({\n                               templateFactory,\n                               ...options,\n                             }));\n        part.appendInto(container);\n      }\n      part.setValue(result);\n      part.commit();\n    };\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @module lit-html\n * @preferred\n */\n\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport {defaultTemplateProcessor} from './lib/default-template-processor.js';\nimport {SVGTemplateResult, TemplateResult} from './lib/template-result.js';\n\nexport {DefaultTemplateProcessor, defaultTemplateProcessor} from './lib/default-template-processor.js';\nexport {directive, DirectiveFn, isDirective} from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport {removeNodes, reparentNodes} from './lib/dom.js';\nexport {noChange, nothing, Part} from './lib/part.js';\nexport {AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isPrimitive, NodePart, PropertyCommitter, PropertyPart} from './lib/parts.js';\nexport {RenderOptions} from './lib/render-options.js';\nexport {parts, render} from './lib/render.js';\nexport {templateCaches, templateFactory} from './lib/template-factory.js';\nexport {TemplateInstance} from './lib/template-instance.js';\nexport {TemplateProcessor} from './lib/template-processor.js';\nexport {SVGTemplateResult, TemplateResult} from './lib/template-result.js';\nexport {createMarker, isTemplatePartActive, Template} from './lib/template.js';\n\ndeclare global {\n  interface Window {\n    litHtmlVersions: string[];\n  }\n}\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.0.0');\n\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings: TemplateStringsArray, ...values: unknown[]) =>\n    new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings: TemplateStringsArray, ...values: unknown[]) =>\n    new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module shady-render\n */\n\nimport {isTemplatePartActive, Template, TemplatePart} from './template.js';\n\nconst walkerNodeFilter = 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */;\n\n/**\n * Removes the list of nodes from a Template safely. In addition to removing\n * nodes from the Template, the Template part indices are updated to match\n * the mutated Template DOM.\n *\n * As the template is walked the removal state is tracked and\n * part indices are adjusted as needed.\n *\n * div\n *   div#1 (remove) <-- start removing (removing node is div#1)\n *     div\n *       div#2 (remove)  <-- continue removing (removing node is still div#1)\n *         div\n * div <-- stop removing since previous sibling is the removing node (div#1,\n * removed 4 nodes)\n */\nexport function removeNodesFromTemplate(\n    template: Template, nodesToRemove: Set<Node>) {\n  const {element: {content}, parts} = template;\n  const walker =\n      document.createTreeWalker(content, walkerNodeFilter, null, false);\n  let partIndex = nextActiveIndexInTemplateParts(parts);\n  let part = parts[partIndex];\n  let nodeIndex = -1;\n  let removeCount = 0;\n  const nodesToRemoveInTemplate = [];\n  let currentRemovingNode: Node|null = null;\n  while (walker.nextNode()) {\n    nodeIndex++;\n    const node = walker.currentNode as Element;\n    // End removal if stepped past the removing node\n    if (node.previousSibling === currentRemovingNode) {\n      currentRemovingNode = null;\n    }\n    // A node to remove was found in the template\n    if (nodesToRemove.has(node)) {\n      nodesToRemoveInTemplate.push(node);\n      // Track node we're removing\n      if (currentRemovingNode === null) {\n        currentRemovingNode = node;\n      }\n    }\n    // When removing, increment count by which to adjust subsequent part indices\n    if (currentRemovingNode !== null) {\n      removeCount++;\n    }\n    while (part !== undefined && part.index === nodeIndex) {\n      // If part is in a removed node deactivate it by setting index to -1 or\n      // adjust the index as needed.\n      part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;\n      // go to the next active part.\n      partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n      part = parts[partIndex];\n    }\n  }\n  nodesToRemoveInTemplate.forEach((n) => n.parentNode!.removeChild(n));\n}\n\nconst countNodes = (node: Node) => {\n  let count = (node.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */) ? 0 : 1;\n  const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);\n  while (walker.nextNode()) {\n    count++;\n  }\n  return count;\n};\n\nconst nextActiveIndexInTemplateParts =\n    (parts: TemplatePart[], startIndex: number = -1) => {\n      for (let i = startIndex + 1; i < parts.length; i++) {\n        const part = parts[i];\n        if (isTemplatePartActive(part)) {\n          return i;\n        }\n      }\n      return -1;\n    };\n\n/**\n * Inserts the given node into the Template, optionally before the given\n * refNode. In addition to inserting the node into the Template, the Template\n * part indices are updated to match the mutated Template DOM.\n */\nexport function insertNodeIntoTemplate(\n    template: Template, node: Node, refNode: Node|null = null) {\n  const {element: {content}, parts} = template;\n  // If there's no refNode, then put node at end of template.\n  // No part indices need to be shifted in this case.\n  if (refNode === null || refNode === undefined) {\n    content.appendChild(node);\n    return;\n  }\n  const walker =\n      document.createTreeWalker(content, walkerNodeFilter, null, false);\n  let partIndex = nextActiveIndexInTemplateParts(parts);\n  let insertCount = 0;\n  let walkerIndex = -1;\n  while (walker.nextNode()) {\n    walkerIndex++;\n    const walkerNode = walker.currentNode as Element;\n    if (walkerNode === refNode) {\n      insertCount = countNodes(node);\n      refNode.parentNode!.insertBefore(node, refNode);\n    }\n    while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {\n      // If we've inserted the node, simply adjust all subsequent parts\n      if (insertCount > 0) {\n        while (partIndex !== -1) {\n          parts[partIndex].index += insertCount;\n          partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n        }\n        return;\n      }\n      partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n    }\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * Module to add shady DOM/shady CSS polyfill support to lit-html template\n * rendering. See the [[render]] method for details.\n *\n * @module shady-render\n * @preferred\n */\n\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport {removeNodes} from './dom.js';\nimport {insertNodeIntoTemplate, removeNodesFromTemplate} from './modify-template.js';\nimport {RenderOptions} from './render-options.js';\nimport {parts, render as litRender} from './render.js';\nimport {templateCaches} from './template-factory.js';\nimport {TemplateInstance} from './template-instance.js';\nimport {TemplateResult} from './template-result.js';\nimport {marker, Template} from './template.js';\n\nexport {html, svg, TemplateResult} from '../lit-html.js';\n\n// Get a key to lookup in `templateCaches`.\nconst getTemplateCacheKey = (type: string, scopeName: string) =>\n    `${type}--${scopeName}`;\n\nlet compatibleShadyCSSVersion = true;\n\nif (typeof window.ShadyCSS === 'undefined') {\n  compatibleShadyCSSVersion = false;\n} else if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {\n  console.warn(\n      `Incompatible ShadyCSS version detected.` +\n      `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and` +\n      `@webcomponents/shadycss@1.3.1.`);\n  compatibleShadyCSSVersion = false;\n}\n\n/**\n * Template factory which scopes template DOM using ShadyCSS.\n * @param scopeName {string}\n */\nconst shadyTemplateFactory = (scopeName: string) =>\n    (result: TemplateResult) => {\n      const cacheKey = getTemplateCacheKey(result.type, scopeName);\n      let templateCache = templateCaches.get(cacheKey);\n      if (templateCache === undefined) {\n        templateCache = {\n          stringsArray: new WeakMap<TemplateStringsArray, Template>(),\n          keyString: new Map<string, Template>()\n        };\n        templateCaches.set(cacheKey, templateCache);\n      }\n\n      let template = templateCache.stringsArray.get(result.strings);\n      if (template !== undefined) {\n        return template;\n      }\n\n      const key = result.strings.join(marker);\n      template = templateCache.keyString.get(key);\n      if (template === undefined) {\n        const element = result.getTemplateElement();\n        if (compatibleShadyCSSVersion) {\n          window.ShadyCSS!.prepareTemplateDom(element, scopeName);\n        }\n        template = new Template(result, element);\n        templateCache.keyString.set(key, template);\n      }\n      templateCache.stringsArray.set(result.strings, template);\n      return template;\n    };\n\nconst TEMPLATE_TYPES = ['html', 'svg'];\n\n/**\n * Removes all style elements from Templates for the given scopeName.\n */\nconst removeStylesFromLitTemplates = (scopeName: string) => {\n  TEMPLATE_TYPES.forEach((type) => {\n    const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));\n    if (templates !== undefined) {\n      templates.keyString.forEach((template) => {\n        const {element: {content}} = template;\n        // IE 11 doesn't support the iterable param Set constructor\n        const styles = new Set<Element>();\n        Array.from(content.querySelectorAll('style')).forEach((s: Element) => {\n          styles.add(s);\n        });\n        removeNodesFromTemplate(template, styles);\n      });\n    }\n  });\n};\n\nconst shadyRenderSet = new Set<string>();\n\n/**\n * For the given scope name, ensures that ShadyCSS style scoping is performed.\n * This is done just once per scope name so the fragment and template cannot\n * be modified.\n * (1) extracts styles from the rendered fragment and hands them to ShadyCSS\n * to be scoped and appended to the document\n * (2) removes style elements from all lit-html Templates for this scope name.\n *\n * Note, <style> elements can only be placed into templates for the\n * initial rendering of the scope. If <style> elements are included in templates\n * dynamically rendered to the scope (after the first scope render), they will\n * not be scoped and the <style> will be left in the template and rendered\n * output.\n */\nconst prepareTemplateStyles =\n    (renderedDOM: DocumentFragment, template: Template, scopeName: string) => {\n      shadyRenderSet.add(scopeName);\n      // Move styles out of rendered DOM and store.\n      const styles = renderedDOM.querySelectorAll('style');\n      // If there are no styles, skip unnecessary work\n      if (styles.length === 0) {\n        // Ensure prepareTemplateStyles is called to support adding\n        // styles via `prepareAdoptedCssText` since that requires that\n        // `prepareTemplateStyles` is called.\n        window.ShadyCSS!.prepareTemplateStyles(template.element, scopeName);\n        return;\n      }\n      const condensedStyle = document.createElement('style');\n      // Collect styles into a single style. This helps us make sure ShadyCSS\n      // manipulations will not prevent us from being able to fix up template\n      // part indices.\n      // NOTE: collecting styles is inefficient for browsers but ShadyCSS\n      // currently does this anyway. When it does not, this should be changed.\n      for (let i = 0; i < styles.length; i++) {\n        const style = styles[i];\n        style.parentNode!.removeChild(style);\n        condensedStyle.textContent! += style.textContent;\n      }\n      // Remove styles from nested templates in this scope.\n      removeStylesFromLitTemplates(scopeName);\n      // And then put the condensed style into the \"root\" template passed in as\n      // `template`.\n      insertNodeIntoTemplate(\n          template, condensedStyle, template.element.content.firstChild);\n      // Note, it's important that ShadyCSS gets the template that `lit-html`\n      // will actually render so that it can update the style inside when\n      // needed (e.g. @apply native Shadow DOM case).\n      window.ShadyCSS!.prepareTemplateStyles(template.element, scopeName);\n      if (window.ShadyCSS!.nativeShadow) {\n        // When in native Shadow DOM, re-add styling to rendered content using\n        // the style ShadyCSS produced.\n        const style = template.element.content.querySelector('style')!;\n        renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);\n      } else {\n        // When not in native Shadow DOM, at this point ShadyCSS will have\n        // removed the style from the lit template and parts will be broken as a\n        // result. To fix this, we put back the style node ShadyCSS removed\n        // and then tell lit to remove that node from the template.\n        // NOTE, ShadyCSS creates its own style so we can safely add/remove\n        // `condensedStyle` here.\n        template.element.content.insertBefore(\n            condensedStyle, template.element.content.firstChild);\n        const removes = new Set();\n        removes.add(condensedStyle);\n        removeNodesFromTemplate(template, removes);\n      }\n    };\n\nexport interface ShadyRenderOptions extends Partial<RenderOptions> {\n  scopeName: string;\n}\n\n/**\n * Extension to the standard `render` method which supports rendering\n * to ShadowRoots when the ShadyDOM (https://github.com/webcomponents/shadydom)\n * and ShadyCSS (https://github.com/webcomponents/shadycss) polyfills are used\n * or when the webcomponentsjs\n * (https://github.com/webcomponents/webcomponentsjs) polyfill is used.\n *\n * Adds a `scopeName` option which is used to scope element DOM and stylesheets\n * when native ShadowDOM is unavailable. The `scopeName` will be added to\n * the class attribute of all rendered DOM. In addition, any style elements will\n * be automatically re-written with this `scopeName` selector and moved out\n * of the rendered DOM and into the document `<head>`.\n *\n * It is common to use this render method in conjunction with a custom element\n * which renders a shadowRoot. When this is done, typically the element's\n * `localName` should be used as the `scopeName`.\n *\n * In addition to DOM scoping, ShadyCSS also supports a basic shim for css\n * custom properties (needed only on older browsers like IE11) and a shim for\n * a deprecated feature called `@apply` that supports applying a set of css\n * custom properties to a given location.\n *\n * Usage considerations:\n *\n * * Part values in `<style>` elements are only applied the first time a given\n * `scopeName` renders. Subsequent changes to parts in style elements will have\n * no effect. Because of this, parts in style elements should only be used for\n * values that will never change, for example parts that set scope-wide theme\n * values or parts which render shared style elements.\n *\n * * Note, due to a limitation of the ShadyDOM polyfill, rendering in a\n * custom element's `constructor` is not supported. Instead rendering should\n * either done asynchronously, for example at microtask timing (for example\n * `Promise.resolve()`), or be deferred until the first time the element's\n * `connectedCallback` runs.\n *\n * Usage considerations when using shimmed custom properties or `@apply`:\n *\n * * Whenever any dynamic changes are made which affect\n * css custom properties, `ShadyCSS.styleElement(element)` must be called\n * to update the element. There are two cases when this is needed:\n * (1) the element is connected to a new parent, (2) a class is added to the\n * element that causes it to match different custom properties.\n * To address the first case when rendering a custom element, `styleElement`\n * should be called in the element's `connectedCallback`.\n *\n * * Shimmed custom properties may only be defined either for an entire\n * shadowRoot (for example, in a `:host` rule) or via a rule that directly\n * matches an element with a shadowRoot. In other words, instead of flowing from\n * parent to child as do native css custom properties, shimmed custom properties\n * flow only from shadowRoots to nested shadowRoots.\n *\n * * When using `@apply` mixing css shorthand property names with\n * non-shorthand names (for example `border` and `border-width`) is not\n * supported.\n */\nexport const render =\n    (result: TemplateResult,\n     container: Element|DocumentFragment,\n     options: ShadyRenderOptions) => {\n      const scopeName = options.scopeName;\n      const hasRendered = parts.has(container);\n      const needsScoping = container instanceof ShadowRoot &&\n          compatibleShadyCSSVersion && result instanceof TemplateResult;\n      // Handle first render to a scope specially...\n      const firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName);\n      // On first scope render, render into a fragment; this cannot be a single\n      // fragment that is reused since nested renders can occur synchronously.\n      const renderContainer =\n          firstScopeRender ? document.createDocumentFragment() : container;\n      litRender(\n          result,\n          renderContainer,\n          {templateFactory: shadyTemplateFactory(scopeName), ...options} as\n              RenderOptions);\n      // When performing first scope render,\n      // (1) We've rendered into a fragment so that there's a chance to\n      // `prepareTemplateStyles` before sub-elements hit the DOM\n      // (which might cause them to render based on a common pattern of\n      // rendering in a custom element's `connectedCallback`);\n      // (2) Scope the template with ShadyCSS one time only for this scope.\n      // (3) Render the fragment into the container and make sure the\n      // container knows its `part` is the one we just rendered. This ensures\n      // DOM will be re-used on subsequent renders.\n      if (firstScopeRender) {\n        const part = parts.get(renderContainer)!;\n        parts.delete(renderContainer);\n        if (part.value instanceof TemplateInstance) {\n          prepareTemplateStyles(\n              renderContainer as DocumentFragment,\n              part.value.template,\n              scopeName);\n        }\n        removeNodes(container, container.firstChild);\n        container.appendChild(renderContainer);\n        parts.set(container, part);\n      }\n      // After elements have hit the DOM, update styling if this is the\n      // initial render to this container.\n      // This is needed whenever dynamic changes are made so it would be\n      // safest to do every render; however, this would regress performance\n      // so we leave it up to the user to call `ShadyCSSS.styleElement`\n      // for dynamic changes.\n      if (!hasRendered && needsScoping) {\n        window.ShadyCSS!.styleElement((container as ShadowRoot).host);\n      }\n    };\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\nwindow.JSCompiler_renameProperty =\n    <P extends PropertyKey>(prop: P, _obj: unknown): P => prop;\n\ndeclare global {\n  var JSCompiler_renameProperty: <P extends PropertyKey>(\n      prop: P, _obj: unknown) => P;\n\n  interface Window {\n    JSCompiler_renameProperty: typeof JSCompiler_renameProperty;\n  }\n}\n\n/**\n * Converts property values to and from attribute values.\n */\nexport interface ComplexAttributeConverter<Type = unknown, TypeHint = unknown> {\n  /**\n   * Function called to convert an attribute value to a property\n   * value.\n   */\n  fromAttribute?(value: string|null, type?: TypeHint): Type;\n\n  /**\n   * Function called to convert a property value to an attribute\n   * value.\n   *\n   * It returns unknown instead of string, to be compatible with\n   * https://github.com/WICG/trusted-types (and similar efforts).\n   */\n  toAttribute?(value: Type, type?: TypeHint): unknown;\n}\n\ntype AttributeConverter<Type = unknown, TypeHint = unknown> =\n    ComplexAttributeConverter<Type>|((value: string, type?: TypeHint) => Type);\n\n/**\n * Defines options for a property accessor.\n */\nexport interface PropertyDeclaration<Type = unknown, TypeHint = unknown> {\n  /**\n   * Indicates how and whether the property becomes an observed attribute.\n   * If the value is `false`, the property is not added to `observedAttributes`.\n   * If true or absent, the lowercased property name is observed (e.g. `fooBar`\n   * becomes `foobar`). If a string, the string value is observed (e.g\n   * `attribute: 'foo-bar'`).\n   */\n  readonly attribute?: boolean|string;\n\n  /**\n   * Indicates the type of the property. This is used only as a hint for the\n   * `converter` to determine how to convert the attribute\n   * to/from a property.\n   */\n  readonly type?: TypeHint;\n\n  /**\n   * Indicates how to convert the attribute to/from a property. If this value\n   * is a function, it is used to convert the attribute value a the property\n   * value. If it's an object, it can have keys for `fromAttribute` and\n   * `toAttribute`. If no `toAttribute` function is provided and\n   * `reflect` is set to `true`, the property value is set directly to the\n   * attribute. A default `converter` is used if none is provided; it supports\n   * `Boolean`, `String`, `Number`, `Object`, and `Array`. Note,\n   * when a property changes and the converter is used to update the attribute,\n   * the property is never updated again as a result of the attribute changing,\n   * and vice versa.\n   */\n  readonly converter?: AttributeConverter<Type, TypeHint>;\n\n  /**\n   * Indicates if the property should reflect to an attribute.\n   * If `true`, when the property is set, the attribute is set using the\n   * attribute name determined according to the rules for the `attribute`\n   * property option and the value of the property converted using the rules\n   * from the `converter` property option.\n   */\n  readonly reflect?: boolean;\n\n  /**\n   * A function that indicates if a property should be considered changed when\n   * it is set. The function should take the `newValue` and `oldValue` and\n   * return `true` if an update should be requested.\n   */\n  hasChanged?(value: Type, oldValue: Type): boolean;\n\n  /**\n   * Indicates whether an accessor will be created for this property. By\n   * default, an accessor will be generated for this property that requests an\n   * update when set. If this flag is `true`, no accessor will be created, and\n   * it will be the user's responsibility to call\n   * `this.requestUpdate(propertyName, oldValue)` to request an update when\n   * the property changes.\n   */\n  readonly noAccessor?: boolean;\n}\n\n/**\n * Map of properties to PropertyDeclaration options. For each property an\n * accessor is made, and the property is processed according to the\n * PropertyDeclaration options.\n */\nexport interface PropertyDeclarations {\n  readonly [key: string]: PropertyDeclaration;\n}\n\ntype PropertyDeclarationMap = Map<PropertyKey, PropertyDeclaration>;\n\ntype AttributeMap = Map<string, PropertyKey>;\n\nexport type PropertyValues = Map<PropertyKey, unknown>;\n\nexport const defaultConverter: ComplexAttributeConverter = {\n\n  toAttribute(value: unknown, type?: unknown): unknown {\n    switch (type) {\n      case Boolean:\n        return value ? '' : null;\n      case Object:\n      case Array:\n        // if the value is `null` or `undefined` pass this through\n        // to allow removing/no change behavior.\n        return value == null ? value : JSON.stringify(value);\n    }\n    return value;\n  },\n\n  fromAttribute(value: string|null, type?: unknown) {\n    switch (type) {\n      case Boolean:\n        return value !== null;\n      case Number:\n        return value === null ? null : Number(value);\n      case Object:\n      case Array:\n        return JSON.parse(value!);\n    }\n    return value;\n  }\n\n};\n\nexport interface HasChanged {\n  (value: unknown, old: unknown): boolean;\n}\n\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual: HasChanged = (value: unknown, old: unknown): boolean => {\n  // This ensures (old==NaN, value==NaN) always returns false\n  return old !== value && (old === old || value === value);\n};\n\nconst defaultPropertyDeclaration: PropertyDeclaration = {\n  attribute: true,\n  type: String,\n  converter: defaultConverter,\n  reflect: false,\n  hasChanged: notEqual\n};\n\nconst microtaskPromise = Promise.resolve(true);\n\nconst STATE_HAS_UPDATED = 1;\nconst STATE_UPDATE_REQUESTED = 1 << 2;\nconst STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;\nconst STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;\nconst STATE_HAS_CONNECTED = 1 << 5;\ntype UpdateState = typeof STATE_HAS_UPDATED|typeof STATE_UPDATE_REQUESTED|\n    typeof STATE_IS_REFLECTING_TO_ATTRIBUTE|\n    typeof STATE_IS_REFLECTING_TO_PROPERTY|typeof STATE_HAS_CONNECTED;\n\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n */\nexport abstract class UpdatingElement extends HTMLElement {\n  /*\n   * Due to closure compiler ES6 compilation bugs, @nocollapse is required on\n   * all static methods and properties with initializers.  Reference:\n   * - https://github.com/google/closure-compiler/issues/1776\n   */\n\n  /**\n   * Maps attribute names to properties; for example `foobar` attribute to\n   * `fooBar` property. Created lazily on user subclasses when finalizing the\n   * class.\n   */\n  private static _attributeToPropertyMap: AttributeMap;\n\n  /**\n   * Marks class as having finished creating properties.\n   */\n  protected static finalized = true;\n\n  /**\n   * Memoized list of all class properties, including any superclass properties.\n   * Created lazily on user subclasses when finalizing the class.\n   */\n  private static _classProperties?: PropertyDeclarationMap;\n\n  /**\n   * User-supplied object that maps property names to `PropertyDeclaration`\n   * objects containing options for configuring the property.\n   */\n  static properties: PropertyDeclarations;\n\n  /**\n   * Returns a list of attributes corresponding to the registered properties.\n   * @nocollapse\n   */\n  static get observedAttributes() {\n    // note: piggy backing on this to ensure we're finalized.\n    this.finalize();\n    const attributes: string[] = [];\n    // Use forEach so this works even if for/of loops are compiled to for loops\n    // expecting arrays\n    this._classProperties!.forEach((v, p) => {\n      const attr = this._attributeNameForProperty(p, v);\n      if (attr !== undefined) {\n        this._attributeToPropertyMap.set(attr, p);\n        attributes.push(attr);\n      }\n    });\n    return attributes;\n  }\n\n  /**\n   * Ensures the private `_classProperties` property metadata is created.\n   * In addition to `finalize` this is also called in `createProperty` to\n   * ensure the `@property` decorator can add property metadata.\n   */\n  /** @nocollapse */\n  private static _ensureClassProperties() {\n    // ensure private storage for property declarations.\n    if (!this.hasOwnProperty(\n            JSCompiler_renameProperty('_classProperties', this))) {\n      this._classProperties = new Map();\n      // NOTE: Workaround IE11 not supporting Map constructor argument.\n      const superProperties: PropertyDeclarationMap =\n          Object.getPrototypeOf(this)._classProperties;\n      if (superProperties !== undefined) {\n        superProperties.forEach(\n            (v: PropertyDeclaration, k: PropertyKey) =>\n                this._classProperties!.set(k, v));\n      }\n    }\n  }\n\n  /**\n   * Creates a property accessor on the element prototype if one does not exist.\n   * The property setter calls the property's `hasChanged` property option\n   * or uses a strict identity check to determine whether or not to request\n   * an update.\n   * @nocollapse\n   */\n  static createProperty(\n      name: PropertyKey,\n      options: PropertyDeclaration = defaultPropertyDeclaration) {\n    // Note, since this can be called by the `@property` decorator which\n    // is called before `finalize`, we ensure storage exists for property\n    // metadata.\n    this._ensureClassProperties();\n    this._classProperties!.set(name, options);\n    // Do not generate an accessor if the prototype already has one, since\n    // it would be lost otherwise and that would never be the user's intention;\n    // Instead, we expect users to call `requestUpdate` themselves from\n    // user-defined accessors. Note that if the super has an accessor we will\n    // still overwrite it\n    if (options.noAccessor || this.prototype.hasOwnProperty(name)) {\n      return;\n    }\n    const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n    Object.defineProperty(this.prototype, name, {\n      // tslint:disable-next-line:no-any no symbol in index\n      get(): any {\n        return this[key];\n      },\n      set(this: UpdatingElement, value: unknown) {\n        // tslint:disable-next-line:no-any no symbol in index\n        const oldValue = (this as any)[name];\n        // tslint:disable-next-line:no-any no symbol in index\n        (this as any)[key] = value;\n        this._requestUpdate(name, oldValue);\n      },\n      configurable: true,\n      enumerable: true\n    });\n  }\n\n  /**\n   * Creates property accessors for registered properties and ensures\n   * any superclasses are also finalized.\n   * @nocollapse\n   */\n  protected static finalize() {\n    if (this.hasOwnProperty(JSCompiler_renameProperty('finalized', this)) &&\n        this.finalized) {\n      return;\n    }\n    // finalize any superclasses\n    const superCtor = Object.getPrototypeOf(this);\n    if (typeof superCtor.finalize === 'function') {\n      superCtor.finalize();\n    }\n    this.finalized = true;\n    this._ensureClassProperties();\n    // initialize Map populated in observedAttributes\n    this._attributeToPropertyMap = new Map();\n    // make any properties\n    // Note, only process \"own\" properties since this element will inherit\n    // any properties defined on the superClass, and finalization ensures\n    // the entire prototype chain is finalized.\n    if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n      const props = this.properties;\n      // support symbols in properties (IE11 does not support this)\n      const propKeys = [\n        ...Object.getOwnPropertyNames(props),\n        ...(typeof Object.getOwnPropertySymbols === 'function') ?\n            Object.getOwnPropertySymbols(props) :\n            []\n      ];\n      // This for/of is ok because propKeys is an array\n      for (const p of propKeys) {\n        // note, use of `any` is due to TypeSript lack of support for symbol in\n        // index types\n        // tslint:disable-next-line:no-any no symbol in index\n        this.createProperty(p, (props as any)[p]);\n      }\n    }\n  }\n\n  /**\n   * Returns the property name for the given attribute `name`.\n   * @nocollapse\n   */\n  private static _attributeNameForProperty(\n      name: PropertyKey, options: PropertyDeclaration) {\n    const attribute = options.attribute;\n    return attribute === false ?\n        undefined :\n        (typeof attribute === 'string' ?\n             attribute :\n             (typeof name === 'string' ? name.toLowerCase() : undefined));\n  }\n\n  /**\n   * Returns true if a property should request an update.\n   * Called when a property value is set and uses the `hasChanged`\n   * option for the property if present or a strict identity check.\n   * @nocollapse\n   */\n  private static _valueHasChanged(\n      value: unknown, old: unknown, hasChanged: HasChanged = notEqual) {\n    return hasChanged(value, old);\n  }\n\n  /**\n   * Returns the property value for the given attribute value.\n   * Called via the `attributeChangedCallback` and uses the property's\n   * `converter` or `converter.fromAttribute` property option.\n   * @nocollapse\n   */\n  private static _propertyValueFromAttribute(\n      value: string|null, options: PropertyDeclaration) {\n    const type = options.type;\n    const converter = options.converter || defaultConverter;\n    const fromAttribute =\n        (typeof converter === 'function' ? converter : converter.fromAttribute);\n    return fromAttribute ? fromAttribute(value, type) : value;\n  }\n\n  /**\n   * Returns the attribute value for the given property value. If this\n   * returns undefined, the property will *not* be reflected to an attribute.\n   * If this returns null, the attribute will be removed, otherwise the\n   * attribute will be set to the value.\n   * This uses the property's `reflect` and `type.toAttribute` property options.\n   * @nocollapse\n   */\n  private static _propertyValueToAttribute(\n      value: unknown, options: PropertyDeclaration) {\n    if (options.reflect === undefined) {\n      return;\n    }\n    const type = options.type;\n    const converter = options.converter;\n    const toAttribute =\n        converter && (converter as ComplexAttributeConverter).toAttribute ||\n        defaultConverter.toAttribute;\n    return toAttribute!(value, type);\n  }\n\n  private _updateState: UpdateState = 0;\n  private _instanceProperties: PropertyValues|undefined = undefined;\n  private _updatePromise: Promise<unknown> = microtaskPromise;\n  private _hasConnectedResolver: (() => void)|undefined = undefined;\n\n  /**\n   * Map with keys for any properties that have changed since the last\n   * update cycle with previous values.\n   */\n  private _changedProperties: PropertyValues = new Map();\n\n  /**\n   * Map with keys of properties that should be reflected when updated.\n   */\n  private _reflectingProperties: Map<PropertyKey, PropertyDeclaration>|\n      undefined = undefined;\n\n  constructor() {\n    super();\n    this.initialize();\n  }\n\n  /**\n   * Performs element initialization. By default captures any pre-set values for\n   * registered properties.\n   */\n  protected initialize() {\n    this._saveInstanceProperties();\n    // ensures first update will be caught by an early access of `updateComplete`\n    this._requestUpdate();\n  }\n\n  /**\n   * Fixes any properties set on the instance before upgrade time.\n   * Otherwise these would shadow the accessor and break these properties.\n   * The properties are stored in a Map which is played back after the\n   * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n   * (<=41), properties created for native platform properties like (`id` or\n   * `name`) may not have default values set in the element constructor. On\n   * these browsers native properties appear on instances and therefore their\n   * default value will overwrite any element default (e.g. if the element sets\n   * this.id = 'id' in the constructor, the 'id' will become '' since this is\n   * the native platform default).\n   */\n  private _saveInstanceProperties() {\n    // Use forEach so this works even if for/of loops are compiled to for loops\n    // expecting arrays\n    (this.constructor as typeof UpdatingElement)\n        ._classProperties!.forEach((_v, p) => {\n          if (this.hasOwnProperty(p)) {\n            const value = this[p as keyof this];\n            delete this[p as keyof this];\n            if (!this._instanceProperties) {\n              this._instanceProperties = new Map();\n            }\n            this._instanceProperties.set(p, value);\n          }\n        });\n  }\n\n  /**\n   * Applies previously saved instance properties.\n   */\n  private _applyInstanceProperties() {\n    // Use forEach so this works even if for/of loops are compiled to for loops\n    // expecting arrays\n    // tslint:disable-next-line:no-any\n    this._instanceProperties!.forEach((v, p) => (this as any)[p] = v);\n    this._instanceProperties = undefined;\n  }\n\n  connectedCallback() {\n    this._updateState = this._updateState | STATE_HAS_CONNECTED;\n    // Ensure first connection completes an update. Updates cannot complete before\n    // connection and if one is pending connection the `_hasConnectionResolver`\n    // will exist. If so, resolve it to complete the update, otherwise\n    // requestUpdate.\n    if (this._hasConnectedResolver) {\n      this._hasConnectedResolver();\n      this._hasConnectedResolver = undefined;\n    }\n  }\n\n  /**\n   * Allows for `super.disconnectedCallback()` in extensions while\n   * reserving the possibility of making non-breaking feature additions\n   * when disconnecting at some point in the future.\n   */\n  disconnectedCallback() {\n  }\n\n  /**\n   * Synchronizes property values when attributes change.\n   */\n  attributeChangedCallback(name: string, old: string|null, value: string|null) {\n    if (old !== value) {\n      this._attributeToProperty(name, value);\n    }\n  }\n\n  private _propertyToAttribute(\n      name: PropertyKey, value: unknown,\n      options: PropertyDeclaration = defaultPropertyDeclaration) {\n    const ctor = (this.constructor as typeof UpdatingElement);\n    const attr = ctor._attributeNameForProperty(name, options);\n    if (attr !== undefined) {\n      const attrValue = ctor._propertyValueToAttribute(value, options);\n      // an undefined value does not change the attribute.\n      if (attrValue === undefined) {\n        return;\n      }\n      // Track if the property is being reflected to avoid\n      // setting the property again via `attributeChangedCallback`. Note:\n      // 1. this takes advantage of the fact that the callback is synchronous.\n      // 2. will behave incorrectly if multiple attributes are in the reaction\n      // stack at time of calling. However, since we process attributes\n      // in `update` this should not be possible (or an extreme corner case\n      // that we'd like to discover).\n      // mark state reflecting\n      this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;\n      if (attrValue == null) {\n        this.removeAttribute(attr);\n      } else {\n        this.setAttribute(attr, attrValue as string);\n      }\n      // mark state not reflecting\n      this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;\n    }\n  }\n\n  private _attributeToProperty(name: string, value: string|null) {\n    // Use tracking info to avoid deserializing attribute value if it was\n    // just set from a property setter.\n    if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {\n      return;\n    }\n    const ctor = (this.constructor as typeof UpdatingElement);\n    const propName = ctor._attributeToPropertyMap.get(name);\n    if (propName !== undefined) {\n      const options =\n          ctor._classProperties!.get(propName) || defaultPropertyDeclaration;\n      // mark state reflecting\n      this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;\n      this[propName as keyof this] =\n          // tslint:disable-next-line:no-any\n          ctor._propertyValueFromAttribute(value, options) as any;\n      // mark state not reflecting\n      this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;\n    }\n  }\n\n  /**\n   * This private version of `requestUpdate` does not access or return the\n   * `updateComplete` promise. This promise can be overridden and is therefore\n   * not free to access.\n   */\n  private _requestUpdate(name?: PropertyKey, oldValue?: unknown) {\n    let shouldRequestUpdate = true;\n    // If we have a property key, perform property update steps.\n    if (name !== undefined) {\n      const ctor = this.constructor as typeof UpdatingElement;\n      const options =\n          ctor._classProperties!.get(name) || defaultPropertyDeclaration;\n      if (ctor._valueHasChanged(\n              this[name as keyof this], oldValue, options.hasChanged)) {\n        if (!this._changedProperties.has(name)) {\n          this._changedProperties.set(name, oldValue);\n        }\n        // Add to reflecting properties set.\n        // Note, it's important that every change has a chance to add the\n        // property to `_reflectingProperties`. This ensures setting\n        // attribute + property reflects correctly.\n        if (options.reflect === true &&\n            !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {\n          if (this._reflectingProperties === undefined) {\n            this._reflectingProperties = new Map();\n          }\n          this._reflectingProperties.set(name, options);\n        }\n      } else {\n        // Abort the request if the property should not be considered changed.\n        shouldRequestUpdate = false;\n      }\n    }\n    if (!this._hasRequestedUpdate && shouldRequestUpdate) {\n      this._enqueueUpdate();\n    }\n  }\n\n  /**\n   * Requests an update which is processed asynchronously. This should\n   * be called when an element should update based on some state not triggered\n   * by setting a property. In this case, pass no arguments. It should also be\n   * called when manually implementing a property setter. In this case, pass the\n   * property `name` and `oldValue` to ensure that any configured property\n   * options are honored. Returns the `updateComplete` Promise which is resolved\n   * when the update completes.\n   *\n   * @param name {PropertyKey} (optional) name of requesting property\n   * @param oldValue {any} (optional) old value of requesting property\n   * @returns {Promise} A Promise that is resolved when the update completes.\n   */\n  requestUpdate(name?: PropertyKey, oldValue?: unknown) {\n    this._requestUpdate(name, oldValue);\n    return this.updateComplete;\n  }\n\n  /**\n   * Sets up the element to asynchronously update.\n   */\n  private async _enqueueUpdate() {\n    // Mark state updating...\n    this._updateState = this._updateState | STATE_UPDATE_REQUESTED;\n    let resolve!: (r: boolean) => void;\n    let reject!: (e: Error) => void;\n    const previousUpdatePromise = this._updatePromise;\n    this._updatePromise = new Promise((res, rej) => {\n      resolve = res;\n      reject = rej;\n    });\n    try {\n      // Ensure any previous update has resolved before updating.\n      // This `await` also ensures that property changes are batched.\n      await previousUpdatePromise;\n    } catch (e) {\n      // Ignore any previous errors. We only care that the previous cycle is\n      // done. Any error should have been handled in the previous update.\n    }\n    // Make sure the element has connected before updating.\n    if (!this._hasConnected) {\n      await new Promise((res) => this._hasConnectedResolver = res);\n    }\n    try {\n      const result = this.performUpdate();\n      // If `performUpdate` returns a Promise, we await it. This is done to\n      // enable coordinating updates with a scheduler. Note, the result is\n      // checked to avoid delaying an additional microtask unless we need to.\n      if (result != null) {\n        await result;\n      }\n    } catch (e) {\n      reject(e);\n    }\n    resolve(!this._hasRequestedUpdate);\n  }\n\n  private get _hasConnected() {\n    return (this._updateState & STATE_HAS_CONNECTED);\n  }\n\n  private get _hasRequestedUpdate() {\n    return (this._updateState & STATE_UPDATE_REQUESTED);\n  }\n\n  protected get hasUpdated() {\n    return (this._updateState & STATE_HAS_UPDATED);\n  }\n\n  /**\n   * Performs an element update. Note, if an exception is thrown during the\n   * update, `firstUpdated` and `updated` will not be called.\n   *\n   * You can override this method to change the timing of updates. If this\n   * method is overridden, `super.performUpdate()` must be called.\n   *\n   * For instance, to schedule updates to occur just before the next frame:\n   *\n   * ```\n   * protected async performUpdate(): Promise<unknown> {\n   *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n   *   super.performUpdate();\n   * }\n   * ```\n   */\n  protected performUpdate(): void|Promise<unknown> {\n    // Mixin instance properties once, if they exist.\n    if (this._instanceProperties) {\n      this._applyInstanceProperties();\n    }\n    let shouldUpdate = false;\n    const changedProperties = this._changedProperties;\n    try {\n      shouldUpdate = this.shouldUpdate(changedProperties);\n      if (shouldUpdate) {\n        this.update(changedProperties);\n      }\n    } catch (e) {\n      // Prevent `firstUpdated` and `updated` from running when there's an\n      // update exception.\n      shouldUpdate = false;\n      throw e;\n    } finally {\n      // Ensure element can accept additional updates after an exception.\n      this._markUpdated();\n    }\n    if (shouldUpdate) {\n      if (!(this._updateState & STATE_HAS_UPDATED)) {\n        this._updateState = this._updateState | STATE_HAS_UPDATED;\n        this.firstUpdated(changedProperties);\n      }\n      this.updated(changedProperties);\n    }\n  }\n\n  private _markUpdated() {\n    this._changedProperties = new Map();\n    this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;\n  }\n\n  /**\n   * Returns a Promise that resolves when the element has completed updating.\n   * The Promise value is a boolean that is `true` if the element completed the\n   * update without triggering another update. The Promise result is `false` if\n   * a property was set inside `updated()`. If the Promise is rejected, an\n   * exception was thrown during the update. This getter can be implemented to\n   * await additional state. For example, it is sometimes useful to await a\n   * rendered element before fulfilling this Promise. To do this, first await\n   * `super.updateComplete` then any subsequent state.\n   *\n   * @returns {Promise} The Promise returns a boolean that indicates if the\n   * update resolved without triggering another update.\n   */\n  get updateComplete() {\n    return this._updatePromise;\n  }\n\n  /**\n   * Controls whether or not `update` should be called when the element requests\n   * an update. By default, this method always returns `true`, but this can be\n   * customized to control when to update.\n   *\n   * * @param _changedProperties Map of changed properties with old values\n   */\n  protected shouldUpdate(_changedProperties: PropertyValues): boolean {\n    return true;\n  }\n\n  /**\n   * Updates the element. This method reflects property values to attributes.\n   * It can be overridden to render and keep updated element DOM.\n   * Setting properties inside this method will *not* trigger\n   * another update.\n   *\n   * * @param _changedProperties Map of changed properties with old values\n   */\n  protected update(_changedProperties: PropertyValues) {\n    if (this._reflectingProperties !== undefined &&\n        this._reflectingProperties.size > 0) {\n      // Use forEach so this works even if for/of loops are compiled to for\n      // loops expecting arrays\n      this._reflectingProperties.forEach(\n          (v, k) => this._propertyToAttribute(k, this[k as keyof this], v));\n      this._reflectingProperties = undefined;\n    }\n  }\n\n  /**\n   * Invoked whenever the element is updated. Implement to perform\n   * post-updating tasks via DOM APIs, for example, focusing an element.\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * * @param _changedProperties Map of changed properties with old values\n   */\n  protected updated(_changedProperties: PropertyValues) {\n  }\n\n  /**\n   * Invoked when the element is first updated. Implement to perform one time\n   * work on the element after update.\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * * @param _changedProperties Map of changed properties with old values\n   */\n  protected firstUpdated(_changedProperties: PropertyValues) {\n  }\n}\n","/**\n@license\nCopyright (c) 2019 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\n\nexport const supportsAdoptingStyleSheets =\n    ('adoptedStyleSheets' in Document.prototype) &&\n    ('replace' in CSSStyleSheet.prototype);\n\nconst constructionToken = Symbol();\n\nexport class CSSResult {\n  _styleSheet?: CSSStyleSheet|null;\n\n  readonly cssText: string;\n\n  constructor(cssText: string, safeToken: symbol) {\n    if (safeToken !== constructionToken) {\n      throw new Error(\n          'CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');\n    }\n    this.cssText = cssText;\n  }\n\n  // Note, this is a getter so that it's lazy. In practice, this means\n  // stylesheets are not created until the first element instance is made.\n  get styleSheet(): CSSStyleSheet|null {\n    if (this._styleSheet === undefined) {\n      // Note, if `adoptedStyleSheets` is supported then we assume CSSStyleSheet\n      // is constructable.\n      if (supportsAdoptingStyleSheets) {\n        this._styleSheet = new CSSStyleSheet();\n        this._styleSheet.replaceSync(this.cssText);\n      } else {\n        this._styleSheet = null;\n      }\n    }\n    return this._styleSheet;\n  }\n\n  toString(): string {\n    return this.cssText;\n  }\n}\n\n/**\n * Wrap a value for interpolation in a css tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value: unknown) => {\n  return new CSSResult(String(value), constructionToken);\n};\n\nconst textFromCSSResult = (value: CSSResult) => {\n  if (value instanceof CSSResult) {\n    return value.cssText;\n  } else {\n    throw new Error(\n        `Value passed to 'css' function must be a 'css' function result: ${\n            value}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`);\n  }\n};\n\n/**\n * Template tag which which can be used with LitElement's `style` property to\n * set element styles. For security reasons, only literal string values may be\n * used. To incorporate non-literal values `unsafeCSS` may be used inside a\n * template string part.\n */\nexport const css = (strings: TemplateStringsArray, ...values: CSSResult[]) => {\n  const cssText = values.reduce(\n      (acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1],\n      strings[0]);\n  return new CSSResult(cssText, constructionToken);\n};\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport {TemplateResult} from 'lit-html';\nimport {render} from 'lit-html/lib/shady-render.js';\n\nimport {PropertyValues, UpdatingElement} from './lib/updating-element.js';\n\nexport * from './lib/updating-element.js';\nexport * from './lib/decorators.js';\nexport {html, svg, TemplateResult, SVGTemplateResult} from 'lit-html/lit-html.js';\nimport {supportsAdoptingStyleSheets, CSSResult} from './lib/css-tag.js';\nexport * from './lib/css-tag.js';\n\ndeclare global {\n  interface Window {\n    litElementVersions: string[];\n  }\n}\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litElementVersions'] || (window['litElementVersions'] = []))\n    .push('2.0.1');\n\nexport interface CSSResultArray extends Array<CSSResult|CSSResultArray> {}\n\n/**\n * Minimal implementation of Array.prototype.flat\n * @param arr the array to flatten\n * @param result the accumlated result\n */\nfunction arrayFlat(\n    styles: CSSResultArray, result: CSSResult[] = []): CSSResult[] {\n  for (let i = 0, length = styles.length; i < length; i++) {\n    const value = styles[i];\n    if (Array.isArray(value)) {\n      arrayFlat(value, result);\n    } else {\n      result.push(value);\n    }\n  }\n  return result;\n}\n\n/** Deeply flattens styles array. Uses native flat if available. */\nconst flattenStyles = (styles: CSSResultArray): CSSResult[] =>\n    styles.flat ? styles.flat(Infinity) : arrayFlat(styles);\n\nexport class LitElement extends UpdatingElement {\n  /**\n   * Ensure this class is marked as `finalized` as an optimization ensuring\n   * it will not needlessly try to `finalize`.\n   */\n  protected static finalized = true;\n\n  /**\n   * Render method used to render the lit-html TemplateResult to the element's\n   * DOM.\n   * @param {TemplateResult} Template to render.\n   * @param {Element|DocumentFragment} Node into which to render.\n   * @param {String} Element name.\n   * @nocollapse\n   */\n  static render = render;\n\n  /**\n   * Array of styles to apply to the element. The styles should be defined\n   * using the `css` tag function.\n   */\n  static styles?: CSSResult|CSSResultArray;\n\n  private static _styles: CSSResult[]|undefined;\n\n  /** @nocollapse */\n  protected static finalize() {\n    super.finalize();\n    // Prepare styling that is stamped at first render time. Styling\n    // is built from user provided `styles` or is inherited from the superclass.\n    this._styles =\n        this.hasOwnProperty(JSCompiler_renameProperty('styles', this)) ?\n        this._getUniqueStyles() :\n        this._styles || [];\n  }\n\n  /** @nocollapse */\n  private static _getUniqueStyles(): CSSResult[] {\n    // Take care not to call `this.styles` multiple times since this generates\n    // new CSSResults each time.\n    // TODO(sorvell): Since we do not cache CSSResults by input, any\n    // shared styles will generate new stylesheet objects, which is wasteful.\n    // This should be addressed when a browser ships constructable\n    // stylesheets.\n    const userStyles = this.styles;\n    const styles: CSSResult[] = [];\n    if (Array.isArray(userStyles)) {\n      const flatStyles = flattenStyles(userStyles);\n      // As a performance optimization to avoid duplicated styling that can\n      // occur especially when composing via subclassing, de-duplicate styles\n      // preserving the last item in the list. The last item is kept to\n      // try to preserve cascade order with the assumption that it's most\n      // important that last added styles override previous styles.\n      const styleSet = flatStyles.reduceRight((set, s) => {\n        set.add(s);\n        // on IE set.add does not return the set.\n        return set;\n      }, new Set<CSSResult>());\n      // Array.from does not work on Set in IE\n      styleSet.forEach((v) => styles.unshift(v));\n    } else if (userStyles) {\n      styles.push(userStyles);\n    }\n    return styles;\n  }\n\n  private _needsShimAdoptedStyleSheets?: boolean;\n\n  /**\n   * Node or ShadowRoot into which element DOM should be rendered. Defaults\n   * to an open shadowRoot.\n   */\n  readonly renderRoot!: Element|DocumentFragment;\n\n  /**\n   * Performs element initialization. By default this calls `createRenderRoot`\n   * to create the element `renderRoot` node and captures any pre-set values for\n   * registered properties.\n   */\n  protected initialize() {\n    super.initialize();\n    (this as {renderRoot: Element | DocumentFragment}).renderRoot =\n        this.createRenderRoot();\n    // Note, if renderRoot is not a shadowRoot, styles would/could apply to the\n    // element's getRootNode(). While this could be done, we're choosing not to\n    // support this now since it would require different logic around de-duping.\n    if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {\n      this.adoptStyles();\n    }\n  }\n\n  /**\n   * Returns the node into which the element should render and by default\n   * creates and returns an open shadowRoot. Implement to customize where the\n   * element's DOM is rendered. For example, to render into the element's\n   * childNodes, return `this`.\n   * @returns {Element|DocumentFragment} Returns a node into which to render.\n   */\n  protected createRenderRoot(): Element|ShadowRoot {\n    return this.attachShadow({mode: 'open'});\n  }\n\n  /**\n   * Applies styling to the element shadowRoot using the `static get styles`\n   * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where\n   * available and will fallback otherwise. When Shadow DOM is polyfilled,\n   * ShadyCSS scopes styles and adds them to the document. When Shadow DOM\n   * is available but `adoptedStyleSheets` is not, styles are appended to the\n   * end of the `shadowRoot` to [mimic spec\n   * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n   */\n  protected adoptStyles() {\n    const styles = (this.constructor as typeof LitElement)._styles!;\n    if (styles.length === 0) {\n      return;\n    }\n    // There are three separate cases here based on Shadow DOM support.\n    // (1) shadowRoot polyfilled: use ShadyCSS\n    // (2) shadowRoot.adoptedStyleSheets available: use it.\n    // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after\n    // rendering\n    if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {\n      window.ShadyCSS.ScopingShim.prepareAdoptedCssText(\n          styles.map((s) => s.cssText), this.localName);\n    } else if (supportsAdoptingStyleSheets) {\n      (this.renderRoot as ShadowRoot).adoptedStyleSheets =\n          styles.map((s) => s.styleSheet!);\n    } else {\n      // This must be done after rendering so the actual style insertion is done\n      // in `update`.\n      this._needsShimAdoptedStyleSheets = true;\n    }\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    // Note, first update/render handles styleElement so we only call this if\n    // connected after first update.\n    if (this.hasUpdated && window.ShadyCSS !== undefined) {\n      window.ShadyCSS.styleElement(this);\n    }\n  }\n\n  /**\n   * Updates the element. This method reflects property values to attributes\n   * and calls `render` to render DOM via lit-html. Setting properties inside\n   * this method will *not* trigger another update.\n   * * @param _changedProperties Map of changed properties with old values\n   */\n  protected update(changedProperties: PropertyValues) {\n    super.update(changedProperties);\n    const templateResult = this.render() as unknown;\n    if (templateResult instanceof TemplateResult) {\n      (this.constructor as typeof LitElement)\n          .render(\n              templateResult,\n              this.renderRoot,\n              {scopeName: this.localName, eventContext: this});\n    }\n    // When native Shadow DOM is used but adoptedStyles are not supported,\n    // insert styling after rendering to ensure adoptedStyles have highest\n    // priority.\n    if (this._needsShimAdoptedStyleSheets) {\n      this._needsShimAdoptedStyleSheets = false;\n      (this.constructor as typeof LitElement)._styles!.forEach((s) => {\n        const style = document.createElement('style');\n        style.textContent = s.cssText;\n        this.renderRoot.appendChild(style);\n      });\n    }\n  }\n\n  /**\n   * Invoked on each update to perform rendering tasks. This method must return\n   * a lit-html TemplateResult. Setting properties inside this method will *not*\n   * trigger the element to update.\n   */\n  protected render(): TemplateResult|void {\n  }\n}\n","import { LitElement, html } from \"lit-element\";\n\nwindow.LitElement = LitElement;\nwindow.html = html;\n\nclass MyElement extends LitElement {\n  // Implement `render` to define a template for your element.\n  render() {\n    /**\n     * Return a lit-html `TemplateResult`.\n     *\n     * To create a `TemplateResult`, tag a JavaScript template literal\n     * with the `html` helper function.\n     */\n    return html`\n      <div>\n        <p>A MY-ELEMENT paragraph</p>\n      </div>\n    `;\n  }\n}\ncustomElements.define(\"my-element\", MyElement);\n"],"sourceRoot":""}